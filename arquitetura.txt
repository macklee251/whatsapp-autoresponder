whatsapp-autoresponder/
├─ app/                                   # aplicação (FastAPI) + lógica
│  ├─ app.py                              # webhook principal / healthcheck
│  ├─ config.py                           # carrega .env (chaves, modelos, janelas)
│  ├─ ai_provider.py                      # cliente OpenRouter (pool + retry + JSON mode)
│  ├─ ai_intent.py                        # IA de intenção (slots: local/data/pagamento/pedidos)
│  ├─ ai_responder.py                     # geração de resposta persona (chat)
│  ├─ schema_intent.py                    # JSON Schema do extractor (validação)
│  ├─ state_manager.py                    # janela de 4h, consolidação de slots, status
│  ├─ business_rules.py                   # regras globais (sem desconto, silêncio 12h, etc.)
│  ├─ router.py                           # resolve conversation_id, carrega contexto
│  ├─ cost_meter.py                       # métrica de custo por chamada
│  ├─ rate_limiter.py                     # proteção de TPS/backoff
│  └─ deps.py                             # injeção de dependências (db, mailer, providers)
│
├─ services/                              # integrações externas
│  ├─ ultra.py                            # UltraMsg/GreenAPI: enviar/receber mensagens
│  ├─ mailer.py                           # envio de email p/ modelo (SMTP/Sendgrid)
│  ├─ notifier.py                         # orquestra alertas (booking, off-profile)
│  └─ logging_middleware.py               # logs estruturados de requisição/resposta
│
├─ db/                                    # persistência
│  ├─ models.py                           # ORM (models, clients, conversations, bookings, etc.)
│  ├─ migrations/                         # migrações (alembic)
│  └─ repo.py                             # repositórios (queries)
│
├─ prompts/                               # prompts e fewshots
│  ├─ system_base.yaml                    # persona + estilo default
│  ├─ reply_fewshots.jsonl                # exemplos de resposta da modelo
│  └─ intent_fewshots.jsonl               # exemplos de extração (local, hora, pagamento)
│
├─ tests/                                 # testes
│  ├─ test_intent_extractor.py            # gírias, “hj”, “agora”, bairros, parcelas, etc.
│  ├─ test_state_window.py                # janela de 4h e expiração
│  ├─ test_special_request_alert.py       # pedidos fora do perfil → email + silêncio
│  └─ test_silence_rule.py                # silêncio 12h respeitado pelo responder
│
├─ scripts/                               # utilitários
│  ├─ seed_personas.py                    # carrega personas e perfis de serviços
│  ├─ import_dialogs_jsonl.py             # importa dataset .jsonl
│  └─ count_dialogs.py                    # conta "dialogue" em jsonl
│
├─ docs/                                  # documentação
│  ├─ architecture.md                     # visão geral e fluxos
│  └─ api.md                              # contrato do webhook / callbacks
│
├─ .env.example                           # variáveis de exemplo
├─ requirements.txt                       # deps (fastapi, pydantic, httpx, jsonschema, etc.)
├─ README.md                              # como rodar local/pod
└─ docker-compose.yml                     # (opcional) local stack